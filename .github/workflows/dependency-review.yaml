# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull
# Request, surfacing known-vulnerable versions of the packages declared or
# updated in the PR. Once installed, if the workflow run is marked as required,
# PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
name: 'Dependency Review'
on:
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      fail-on-severity:
        description: "Minimum severity for failing PRs. Passed through to dependency-review-action"
        default: "low"
        required: false
        type: string
      allow-ghsas:
        description: "Allowed GHSAs. Passed through to dependency-review-action"
        default: ""
        required: false
        type: string
      allow-dependencies-licenses:
        description: "Allowed dependency licenses. Passed through to dependency-review-action"
        default: ""
        required: false
        type: string
      allow-additional-licenses:
        description: "Add more per-repo licenses to the shared list."
        default: ""
        required: false
        type: string
      base-ref:
        description: "Base ref. Passed through to dependency-review-action"
        default: ""
        required: false
        type: string
      head-ref:
        description: "Head ref. Passed through to dependency-review-action"
        default: ""
        required: false
        type: string

jobs:
  dependency-review:
    name: 'Dependency Review'
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create summary file
        run: echo "DEP_REVIEW_SUMMARY_FILE=${RUNNER_TEMP}/dep_review.md" >> "${GITHUB_ENV}"

      - name: 'Dependency Review'
        uses: actions/dependency-review-action@72eb03d02c7872a771aacd928f3123ac62ad6d3a # v4.3.3
        env:
          GITHUB_STEP_SUMMARY: "${{ env.DEP_REVIEW_SUMMARY_FILE }}"
        with:
          fail-on-severity: ${{ inputs.fail-on-severity }}
          # NOTE: List shouldn't end with comma
          allow-licenses: >
            (MIT OR Apache-2.0) AND Unicode-DFS-2016,
            0BSD AND ISC AND MIT,
            0BSD,
            Apache-2.0 AND BSD-2-Clause AND CC0-1.0 AND ISC AND MIT,
            Apache-2.0 AND BSD-2-Clause AND BSD-3-Clause AND ISC AND MIT,
            Apache-2.0 AND BSD-3-Clause,
            Apache-2.0,
            BlueOak-1.0.0,
            BSD-2-Clause AND BSD-3-Clause,
            BSD-2-Clause-FreeBSD,
            BSD-2-Clause,
            BSD-3-Clause AND BSD-3-Clause-Clear,
            BSD-3-Clause AND LicenseRef-scancode-protobuf,
            BSD-3-Clause,
            CC-BY-3.0,
            CC-BY-4.0,
            CC0-1.0,
            ISC AND (Apache-2.0 OR ISC) AND OpenSSL,
            ISC AND MIT,
            ISC,
            LGPL-2.1,
            LicenseRef-scancode-unicode AND MIT,
            MIT AND BSD-3-Clause,
            MIT AND WTFPL,
            MIT AND Zlib,
            MIT-0,
            MIT,
            MPL-2.0,
            ODC-By-1.0,
            OFL-1.1,
            Python-2.0,
            Unicode-DFS-2016,
            Unlicense,
            WTFPL,
            Zlib
            ${{ inputs.allow-additional-licenses != '' && ',' || '' }}
            ${{ inputs.allow-additional-licenses }}
          allow-ghsas: ${{ inputs.allow-ghsas }}
          allow-dependencies-licenses: ${{ inputs.allow-dependencies-licenses != '' && format('pkg:golang/github.com/gravitational/teleport, pkg:golang/github.com/gravitational/teleport/api, {0}', inputs.allow-dependencies-licenses) || 'pkg:golang/github.com/gravitational/teleport, pkg:golang/github.com/gravitational/teleport/api'}}
          comment-summary-in-pr: never
          base-ref: ${{ inputs.base-ref || github.event.pull_request.base.sha || github.event.repository.default_branch }}
          head-ref: ${{ inputs.head-ref || github.event.pull_request.head.sha || github.ref }}

      - name: Write the output
        run: |
          if [[ ! -f "${DEP_REVIEW_SUMMARY_FILE}" ]]; then
            echo "No summary file found"
            exit
          fi

          # Write to step summary when the size is small enough
          # Output will be empty when the file is above than the threshold (1M), which matches GH's limit
          DU_OUTPUT="$(du --apparent-size --bytes --threshold="$(( 1024 * 1024 ))" "${DEP_REVIEW_SUMMARY_FILE}")"
          if [[ -z "${DU_OUTPUT}" ]]; then
            cat "${DEP_REVIEW_SUMMARY_FILE}" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo "::warning Dependency review output too large for GH step summary. See logs for details." | tee -a "${GITHUB_STEP_SUMMARY}"
          done

          cat "${DEP_REVIEW_SUMMARY_FILE}"
